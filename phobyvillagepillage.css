@charset "UTF-8";
/**
 *------
 * BGA framework: © Gregory Isabelli <gisabelli@boardgamearena.com> & Emmanuel Colin <ecolin@boardgamearena.com>
 * PhobyVillagePillage implementation : © <Your name here> <Your email address here>
 *
 * This code has been produced on the BGA studio platform for use on http://boardgamearena.com.
 * See http://en.boardgamearena.com/#!doc/Studio for more information.
 * -----
 *
 * phobyvillagepillage.css
 *
 * PhobyVillagePillage stylesheet
 *
 */

/*
    This is the CSS stylesheet of your game User Interface.
    
    Styles defined on this file will be applied to the HTML elements you define in your
    HTML template (phobyvillagepillage_phobyvillagepillage.tpl), and to HTML elements you create dynamically
    (in phobyvillagepillage.js).
    
    Usually, you are using CSS to:
    
    1°) define the overall layout of your game
        (ex: place the board on the top left, place player's hand beside, place the deck on the right, ...).

    2°) create your CSS-sprites:
        All images of your games should be gathered into a small number of image files. Then, using
        background-image and background-position CSS properties, you create HTML blocks that can 
        display these images correctly (see example below).
    
    3°) ... anything else:
        It is really easy to add and remove CSS classes dynamically from your Javascript with
        dojo.addClass and dojo.removeClass. It is also easy to check if an element has a class
        (dojo.hasClass) or to get all elements with a specific class (dojo.query). This is why,
        very often, using CSS classes for the logic of your user interface allow you to do complex
        thing easily.
        
        
     Note: on the production platform, this file will be compressed and comments will be removed.
           Consequently, don't hesitate to put as many comments as necessary.
*/


/* Note: you must not use any @import directive */


/********* You can start writing your CSS below this line: **********/


/*
    Example of CSS sprites (a black token and a white token, 20x20px each, embedded in the same "tokens.png" 40x20px image):

    .white_token {
        background-image: url('img/tokens.png');
        background-position: 0px 0px;
    }
    .black_token {
        background-image: url('img/tokens.png');
        background-position: -20px 0px;
    }
    .token {
        width: 20px;
        height: 20px;
        background-repeat: none;
    }
*/

.player-container {
    height: 250px;
    margin: 10px 5px;
    background-color: rgba(255, 255, 255, 0.5);
    border-radius: 8px;
    border-width: 1px;
    border-style: solid;
    display: flex }
    .player-container .player-name {
      background-color: white;
      border-radius: 5px;
      width: 100px;
      margin: 5px;
      text-align: center;
      border: 1px solid black;
      padding: 3px; }
    .player-container .player-hand {
      display: flex; }
      .player-container .player-hand .foo-card {
        margin: 2px 5px; }
  
  .foo-card {
    width: 100px;
    height: 180px;
    border-radius: 10px;
    border: 1px solid black; }
    .foo-card[data-color='0'] {
      background-color: blue; }
    .foo-card[data-color='1'] {
      background-color: green; }
    .foo-card[data-color='2'] {
      background-color: pink; }
    .foo-card[data-color='3'] {
      background-color: yellow; }
    .foo-card[data-color='4'] {
      background-color: gray; }
    .foo-card::before {
      content: attr(data-value);
      display: inline-block;
      background: black;
      border-radius: 10px;
      width: 20px;
      height: 20px;
      color: white;
      text-align: center;
      margin-top: 5px;
      margin-left: 5px; }
  
  /*# sourceMappingURL=foogame.css.map */




